package pepperTap;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pepperTap.Cart;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CART.
*/
public class CartDao extends AbstractDao<Cart, Long> {

    public static final String TABLENAME = "CART";

    /**
     * Properties of entity Cart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Is_empty = new Property(1, Boolean.class, "is_empty", false, "IS_EMPTY");
        public final static Property Sub_total = new Property(2, Float.class, "sub_total", false, "SUB_TOTAL");
        public final static Property Total = new Property(3, Float.class, "total", false, "TOTAL");
        public final static Property Discounts = new Property(4, Float.class, "discounts", false, "DISCOUNTS");
        public final static Property Savings = new Property(5, Float.class, "savings", false, "SAVINGS");
        public final static Property Delivery_charge = new Property(6, Float.class, "delivery_charge", false, "DELIVERY_CHARGE");
        public final static Property No_items = new Property(7, Integer.class, "no_items", false, "NO_ITEMS");
        public final static Property Cart_code_on_server = new Property(8, String.class, "cart_code_on_server", false, "CART_CODE_ON_SERVER");
    };

    private DaoSession daoSession;


    public CartDao(DaoConfig config) {
        super(config);
    }
    
    public CartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CART' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'IS_EMPTY' INTEGER," + // 1: is_empty
                "'SUB_TOTAL' REAL," + // 2: sub_total
                "'TOTAL' REAL," + // 3: total
                "'DISCOUNTS' REAL," + // 4: discounts
                "'SAVINGS' REAL," + // 5: savings
                "'DELIVERY_CHARGE' REAL," + // 6: delivery_charge
                "'NO_ITEMS' INTEGER," + // 7: no_items
                "'CART_CODE_ON_SERVER' TEXT);"); // 8: cart_code_on_server
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CART'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean is_empty = entity.getIs_empty();
        if (is_empty != null) {
            stmt.bindLong(2, is_empty ? 1l: 0l);
        }
 
        Float sub_total = entity.getSub_total();
        if (sub_total != null) {
            stmt.bindDouble(3, sub_total);
        }
 
        Float total = entity.getTotal();
        if (total != null) {
            stmt.bindDouble(4, total);
        }
 
        Float discounts = entity.getDiscounts();
        if (discounts != null) {
            stmt.bindDouble(5, discounts);
        }
 
        Float savings = entity.getSavings();
        if (savings != null) {
            stmt.bindDouble(6, savings);
        }
 
        Float delivery_charge = entity.getDelivery_charge();
        if (delivery_charge != null) {
            stmt.bindDouble(7, delivery_charge);
        }
 
        Integer no_items = entity.getNo_items();
        if (no_items != null) {
            stmt.bindLong(8, no_items);
        }
 
        String cart_code_on_server = entity.getCart_code_on_server();
        if (cart_code_on_server != null) {
            stmt.bindString(9, cart_code_on_server);
        }
    }

    @Override
    protected void attachEntity(Cart entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cart readEntity(Cursor cursor, int offset) {
        Cart entity = new Cart( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // is_empty
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // sub_total
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // total
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // discounts
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // savings
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // delivery_charge
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // no_items
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // cart_code_on_server
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cart entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIs_empty(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setSub_total(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setTotal(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setDiscounts(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setSavings(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setDelivery_charge(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setNo_items(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCart_code_on_server(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cart entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cart entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
