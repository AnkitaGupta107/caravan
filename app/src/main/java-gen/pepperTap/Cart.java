package pepperTap;

import java.util.List;
import pepperTap.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CART.
 */
public class Cart {

    private Long id;
    private Boolean is_empty;
    private Float sub_total;
    private Float total;
    private Float discounts;
    private Float savings;
    private Float delivery_charge;
    private Integer no_items;
    private String cart_code_on_server;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CartDao myDao;

    private List<LineItem> lineItemList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Cart() {
    }

    public Cart(Long id) {
        this.id = id;
    }

    public Cart(Long id, Boolean is_empty, Float sub_total, Float total, Float discounts, Float savings, Float delivery_charge, Integer no_items, String cart_code_on_server) {
        this.id = id;
        this.is_empty = is_empty;
        this.sub_total = sub_total;
        this.total = total;
        this.discounts = discounts;
        this.savings = savings;
        this.delivery_charge = delivery_charge;
        this.no_items = no_items;
        this.cart_code_on_server = cart_code_on_server;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCartDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Boolean getIs_empty() {
        return is_empty;
    }

    public void setIs_empty(Boolean is_empty) {
        this.is_empty = is_empty;
    }

    public Float getSub_total() {
        return sub_total;
    }

    public void setSub_total(Float sub_total) {
        this.sub_total = sub_total;
    }

    public Float getTotal() {
        return total;
    }

    public void setTotal(Float total) {
        this.total = total;
    }

    public Float getDiscounts() {
        return discounts;
    }

    public void setDiscounts(Float discounts) {
        this.discounts = discounts;
    }

    public Float getSavings() {
        return savings;
    }

    public void setSavings(Float savings) {
        this.savings = savings;
    }

    public Float getDelivery_charge() {
        return delivery_charge;
    }

    public void setDelivery_charge(Float delivery_charge) {
        this.delivery_charge = delivery_charge;
    }

    public Integer getNo_items() {
        return no_items;
    }

    public void setNo_items(Integer no_items) {
        this.no_items = no_items;
    }

    public String getCart_code_on_server() {
        return cart_code_on_server;
    }

    public void setCart_code_on_server(String cart_code_on_server) {
        this.cart_code_on_server = cart_code_on_server;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LineItem> getLineItemList() {
        if (lineItemList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LineItemDao targetDao = daoSession.getLineItemDao();
            List<LineItem> lineItemListNew = targetDao._queryCart_LineItemList(id);
            synchronized (this) {
                if(lineItemList == null) {
                    lineItemList = lineItemListNew;
                }
            }
        }
        return lineItemList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLineItemList() {
        lineItemList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
